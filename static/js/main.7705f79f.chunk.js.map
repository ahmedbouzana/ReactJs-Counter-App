{"version":3,"sources":["serviceWorker.js","components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","NavBar","_ref","totalCounters","react_default","a","createElement","className","href","Counter","_this","this","getBadgeClasses","formatCount","onClick","props","onDecrement","counter","disabled","value","onIncrement","onDelete","id","classes","Component","Counters","_this$props","onReset","counters","map","components_counter","key","App","state","handleReset","c","setState","handleIncrement","Object","toConsumableArray","index","indexOf","objectSpread","handleDecrement","handleDelete","counterId","filter","Fragment","navbar","length","components_counters","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7705f79f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\n//sfc\r\nconst NavBar = ({totalCounters}) => {\r\n  return ( <nav className=\"navbar navbar-light bg-light\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          Navbar{\" \"} <span className=\"badge badge-pill badge-success\">{totalCounters}</span>\r\n        </a>\r\n      </nav> );\r\n}\r\n \r\nexport default NavBar;","//imrc\r\nimport React, { Component } from \"react\";\r\n\r\n//cc\r\nclass Counter extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col-1 center-block text-center\">\r\n          <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n        </div>\r\n        <div className=\"col\">\r\n          <button\r\n              onClick={() => this.props.onDecrement(this.props.counter)}\r\n              className=\"btn btn-secondary btn-sm\"\r\n              disabled={this.props.counter.value===0?\"Disables\":\"\"}\r\n            >\r\n              -\r\n            </button>\r\n\r\n            <button \r\n              onClick={() => this.props.onIncrement(this.props.counter)}\r\n              className=\"btn btn-success btn-sm m-2\"\r\n            >\r\n              +\r\n            </button>\r\n\r\n            <button \r\n              onClick={() => this.props.onDelete(this.props.counter.id)}\r\n              className=\"btn btn-danger btn-sm m-3\"\r\n            >\r\n              X\r\n            </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getBadgeClasses() {\r\n    let classes = \"badge m-2 badge-\";\r\n    classes += this.props.counter.value === 0 ? \"warning\" : \"success\";\r\n    return classes;\r\n  }\r\n\r\n  formatCount() {\r\n    const { value } = this.props.counter;\r\n    return value === 0 ? \"Zero\" : value;\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from 'react';\r\nimport Counter from './counter';\r\n\r\nclass Counters extends Component {\r\n    render() { \r\n\r\n        const{onReset, counters, onDelete, onIncrement, onDecrement} = this.props;\r\n\r\n        return ( \r\n            <div>\r\n                <button\r\n                onClick={onReset}\r\n                className=\"btn btn-primary btn-sm m-2\">\r\n                    Reset\r\n                </button>\r\n                {counters.map(counter => \r\n                <Counter\r\n                    key={counter.id} \r\n                    onIncrement={onIncrement} \r\n                    onDecrement={onDecrement} \r\n                    onDelete={onDelete} \r\n                    counter={counter} \r\n                 />)}\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Counters;","import React, { Component } from \"react\";\r\nimport NavBar from \"./components/navbar\";\r\nimport Counters from \"./components/counters\";\r\nimport \"./App.css\";\r\n//import { HookMapInterceptor } from \"tapable\";\r\n\r\nclass App extends Component {\r\n\r\n  state = { \r\n    counters:[\r\n        {id:1, value:4},\r\n        {id:2, value:0},\r\n        {id:3, value:10},\r\n        {id:4, value:0}\r\n    ]\r\n};\r\n\r\nhandleReset = () => {\r\n    const counters = this.state.counters.map(c=>{\r\n        c.value = 0;\r\n        return c;\r\n    });\r\n    this.setState({counters});\r\n};\r\n\r\nhandleIncrement = counter =>{\r\n    const counters = [...this.state.counters];\r\n    const index = counters.indexOf(counter);\r\n    counters[index] = {...counter};\r\n    counters[index].value++;\r\n    this.setState({counters});\r\n};\r\n\r\nhandleDecrement = counter =>{\r\n    const counters = [...this.state.counters];\r\n    const index = counters.indexOf(counter);\r\n    counters[index] = {...counter};\r\n    counters[index].value--;\r\n    this.setState({counters});\r\n};\r\n\r\nhandleDelete = (counterId) => {\r\n  const counters = this.state.counters.filter(counter=>counter.id !== counterId);\r\n  this.setState({counters});\r\n};\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <NavBar totalCounters={this.state.counters.filter(c => c.value > 0 ).length}/>\r\n        <main className=\"container\">\r\n          <Counters counters={this.state.counters} onReset={this.handleReset} onIncrement={this.handleIncrement} onDecrement={this.handleDecrement} onDelete={this.handleDelete} />\r\n        </main>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport App from \"./App\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}